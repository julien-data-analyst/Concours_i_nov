data_fich_10 = extraction_pdf_vag_7_10(liste_fich_2[1], c(18, 19), c(2, 2), liste_coord_fich_10)
data_fich_7 = extraction_pdf_vag_7_10(liste_fich_2[2], c(12, 13), c(5, 3)) # c(12, 13), c(5, 3)
View(data_fich_7)
data_fich_8 = extraction_pdf_vag_7_10(liste_fich_2[3], c(22, 23), c(7, 3))
data_fich_9 = extraction_pdf_vag_7_10(liste_fich_2[4], c(18, 19), c(3, 1))
### Fusion des différents datasets de chaque thématique ####
liste_inf_nov_7_10 = vector(mode = "list", length = 4)
liste_inf_nov_7_10[1] = list(rbindlist(data_fich_7[[1]][[1]]))
liste_inf_nov_7_10[2] = list(rbindlist(data_fich_8[[1]][[1]]))
liste_inf_nov_7_10[3] = list(rbindlist(data_fich_9[[1]][[1]]))
liste_inf_nov_7_10[4] = list(rbindlist(data_fich_10[[1]][[1]]))
# Ajout d'informations
for(i in 1:6){
liste_inf_nov_1_6[[i]] %>%
mutate(VAGUE = i,
URL_FICH_ORIGINE = liste_fich[i]) -> liste_inf_nov_1_6[[i]]
}
liste_fich_2[5] = liste_fich_2[1]
for(i in 2:5){
liste_inf_nov_7_10[[i-1]] %>%
mutate(VAGUE = i + 5,
URL_FICH_ORIGINE = liste_fich_2[i]) -> liste_inf_nov_7_10[[i-1]]
}
View(liste_inf_nov_7_10)
# Fusion des datasets
dataset_i_nov_1_6 = rbindlist(liste_inf_nov_1_6)
dataset_i_nov_7_10 = rbindlist(liste_inf_nov_7_10)
View(dataset_i_nov_7_10)
View(dataset_i_nov_1_6_final)
dataset_i_nov_1_6 %>%
rename(THEMATIQUE = THÉMATIQUE) %>%
mutate(THEMATIQUE = str_to_upper(THEMATIQUE)) -> dataset_i_nov_1_6
# RENOMMER LES COLONNES
dataset_i_nov_7_10 %>%
rename(ENTREPRISES = NOM_ENTREPRISE,
PROJETS = NOM_PROJET) %>%
mutate(THEMATIQUE = str_to_upper(THEMATIQUE)) %>%
select(ENTREPRISES, PROJETS, THEMATIQUE, PAGE, VAGUE, URL_FICH_ORIGINE) -> dataset_i_nov_7_10
# Vérification du succès de l'opération
head(dataset_i_nov_1_6)
tail(dataset_i_nov_1_6)
str(dataset_i_nov_1_6)
head(dataset_i_nov_7_10)
tail(dataset_i_nov_7_10)
str(dataset_i_nov_7_10)
# Fusion des deux derniers datasets
dataset_final = rbind(dataset_i_nov_1_6, dataset_i_nov_7_10)
View(dataset_final)
# Vérification du succès de l'opération
head(dataset_final)
tail(dataset_final)
str(dataset_final)
# Envoie de ces données dans un fichier CSV
write.csv2(dataset_final, file = "../Data/i_nov_vag_1_10_somm.csv",
row.names = FALSE, fileEncoding = "utf-8")
# Prise en compte de la structure
readLines(con = "../Data/i_nov_vag_1_10_somm.csv", n=10)
# Application de l'importation
dataset_i_nov = read.csv(file = "../Data/i_nov_vag_1_10_somm.csv",
sep = ";",
quote = "\"",
header = TRUE)
# Vérification du succès de l'opération
head(dataset_i_nov)
tail(dataset_i_nov)
# Vérification du succès de l'opération
head(dataset_i_nov)
tail(dataset_i_nov)
str(dataset_i_nov)
# Prenons un exemple de projet dans l'une de ces vagues
i_nov_7_10 = dataset_i_nov %>% filter(VAGUE %in% c(7, 8, 9, 10))
View(i_nov_7_10)
premier_projet = i_nov_7_10[1, ]
localisation_info_box_prem = locate_areas(premier_projet$URL_FICH_ORIGINE, pages= premier_projet$PAGE)
localisation_info_box_prem = list(c(179, 111, 248, 253))
# Extraction des données
extraction_7_10 = extract_tables(premier_projet$URL_FICH_ORIGINE,
pages = premier_projet$PAGE,
area = localisation_info_box_prem,
guess = FALSE,
col_names = FALSE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
# Vérification du succès de l'opération
data_extract
# Application de l'extraction sur les quatre derniers fichiers PDF
dataset_inf_proj_7_10 = data.frame()
gc()
localisation_actuelle = list(c())
localisation_actuelle = localisation_info_box_prem
for(lign in 1:nrow(i_nov_7_10)){
## Récupérons les informations de ce projet
extraction_7_10 = extract_tables(i_nov_7_10[lign, ]$URL_FICH_ORIGINE,
pages = i_nov_7_10[lign, ]$PAGE,
area = localisation_actuelle,
guess = FALSE)
print(extraction_7_10)
print(i_nov_7_10[lign, ])
print(i_nov_7_10[lign, ]$URL_FICH_ORIGINE)
print(i_nov_7_10[lign, ]$PAGE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
dataset_inf_proj_7_10 = bind_rows(dataset_inf_proj_7_10, data_extract)
gc()
}
# Application de l'extraction sur les quatre derniers fichiers PDF
dataset_inf_proj_7_10 = data.frame()
gc()
localisation_actuelle = list(c())
localisation_actuelle = localisation_info_box_prem
for(lign in 1:nrow(i_nov_7_10)){
## Récupérons les informations de ce projet
extraction_7_10 = extract_tables(i_nov_7_10[lign, ]$URL_FICH_ORIGINE,
pages = i_nov_7_10[lign, ]$PAGE,
area = localisation_actuelle,
guess = FALSE)
#print(extraction_7_10)
#print(i_nov_7_10[lign, ])
#print(i_nov_7_10[lign, ]$URL_FICH_ORIGINE)
#print(i_nov_7_10[lign, ]$PAGE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
dataset_inf_proj_7_10 = bind_rows(dataset_inf_proj_7_10, data_extract)
gc()
}
# Application de l'extraction sur les quatre derniers fichiers PDF
dataset_inf_proj_7_10 = data.frame()
gc()
localisation_actuelle = list(c())
localisation_actuelle = localisation_info_box_prem
for(lign in 1:nrow(i_nov_7_10)){
## Récupérons les informations de ce projet
extraction_7_10 = extract_tables(i_nov_7_10[lign, ]$URL_FICH_ORIGINE,
pages = i_nov_7_10[lign, ]$PAGE,
area = localisation_actuelle,
guess = FALSE)
print(extraction_7_10)
print(i_nov_7_10[lign, ])
print(i_nov_7_10[lign, ]$URL_FICH_ORIGINE)
print(i_nov_7_10[lign, ]$PAGE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
dataset_inf_proj_7_10 = bind_rows(dataset_inf_proj_7_10, data_extract)
gc()
}
# Application de l'extraction sur les quatre derniers fichiers PDF
dataset_inf_proj_7_10 = data.frame()
gc()
localisation_actuelle = list(c())
localisation_actuelle = localisation_info_box_prem
for(lign in 1:nrow(i_nov_7_10)){
if(i_nov_7_10[lign, ]$PROJETS == "VIZZIA"){
i_nov_7_10[lign, ]$PAGE = 55
}
## Récupérons les informations de ce projet
extraction_7_10 = extract_tables(i_nov_7_10[lign, ]$URL_FICH_ORIGINE,
pages = i_nov_7_10[lign, ]$PAGE,
area = localisation_actuelle,
guess = FALSE)
print(extraction_7_10)
print(i_nov_7_10[lign, ])
print(i_nov_7_10[lign, ]$URL_FICH_ORIGINE)
print(i_nov_7_10[lign, ]$PAGE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
dataset_inf_proj_7_10 = bind_rows(dataset_inf_proj_7_10, data_extract)
gc()
}
View(dataset_inf_proj_7_10)
# Application de l'extraction sur les quatre derniers fichiers PDF
dataset_inf_proj_7_10 = data.frame()
gc()
localisation_actuelle = list(c())
localisation_actuelle = localisation_info_box_prem
for(lign in 1:nrow(i_nov_7_10)){
if(i_nov_7_10[lign, ]$PROJETS == "VIZZIA"){
i_nov_7_10[lign, ]$PAGE = 55
}
## Récupérons les informations de ce projet
extraction_7_10 = extract_tables(i_nov_7_10[lign, ]$URL_FICH_ORIGINE,
pages = i_nov_7_10[lign, ]$PAGE,
area = localisation_actuelle,
guess = FALSE)
print(extraction_7_10)
print(i_nov_7_10[lign, ])
print(i_nov_7_10[lign, ]$URL_FICH_ORIGINE)
print(i_nov_7_10[lign, ]$PAGE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
# Ajout des colonnes Page et Vague
data_extract$PAGE = i_nov_7_10[lign, ]$PAGE
data_extract$VAGUE = i_nov_7_10[lign, ]$VAGUE
dataset_inf_proj_7_10 = bind_rows(dataset_inf_proj_7_10, data_extract)
gc()
}
View(dataset_i_nov_7_10)
View(dataset_inf_proj_7_10)
# Préparation des données récupérées
dataset_inf_proj_7_10[214, ]$Réalisation = "2023 - 2025"
View(dataset_i_nov_1_6)
View(dataset_inf_proj_1_3)
View(dataset_i_nov_1_6_final)
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
dataset_inf_proj_7_10 %>%
mutate(    REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]))
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
dataset_inf_proj_7_10 %>%
mutate(REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(REALISATION_FIN=="", REALISATION_DEBUT, REALISATION_FIN))
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
#
dataset_inf_proj_7_10 %>%
mutate(REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(REALISATION_FIN=="", REALISATION_DEBUT, REALISATION_FIN),
MONTANT = str_remove_all(`Montant du projet`, "(\s|\\€)"))
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
#
dataset_inf_proj_7_10 %>%
mutate(REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(REALISATION_FIN=="", REALISATION_DEBUT, REALISATION_FIN),
MONTANT = str_remove_all(`Montant du projet`, "(\\s|\\€)"))
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
#
dataset_inf_proj_7_10 %>%
mutate(REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = str_remove_all(`Montant du projet`, "(\\s|\\€)"))
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
#
dataset_inf_proj_7_10 %>%
mutate(REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = str_remove_all(`Montant du projet`, "(\\s|\\€)"),
AIDE = str_remove_all(`Aide accordée`, "(\\s|\\€)"))
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
#
dataset_inf_proj_7_10 %>%
mutate(
REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = as.numeric(str_remove_all(`Montant du projet`, "(\\s|\\€)")),
AIDE = as.numeric(str_remove_all(`Aide accordée`, "(\\s|\\€)"))
) %>%
select(-c(Réalisation, `Montant du projet`, `Aide accordée`))
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
#
dataset_inf_proj_7_10 %>%
mutate(
REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = as.numeric(str_remove_all(`Montant du projet`, "(\\s|\\€)")),
AIDE = as.numeric(str_remove_all(`Aide accordée`, "(\\s|\\€)"))
) %>%
select(-c(Réalisation, `Montant du projet`, `Aide accordée`)) -> data_inf_proj_7_10
View(data_inf_proj_7_10)
print(extraction_7_10)
# Application de l'extraction sur les quatre derniers fichiers PDF
dataset_inf_proj_7_10 = data.frame()
gc()
localisation_actuelle = list(c())
localisation_actuelle = localisation_info_box_prem
for(lign in 1:nrow(i_nov_7_10)){
if(i_nov_7_10[lign, ]$PROJETS == "VIZZIA"){
i_nov_7_10[lign, ]$PAGE = 55
}
## Récupérons les informations de ce projet
extraction_7_10 = extract_tables(i_nov_7_10[lign, ]$URL_FICH_ORIGINE,
pages = i_nov_7_10[lign, ]$PAGE,
area = localisation_actuelle,
guess = FALSE,
col_names = FALSE)
print(extraction_7_10)
print(i_nov_7_10[lign, ])
print(i_nov_7_10[lign, ]$URL_FICH_ORIGINE)
print(i_nov_7_10[lign, ]$PAGE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
# Ajout des colonnes Page et Vague
data_extract$PAGE = i_nov_7_10[lign, ]$PAGE
data_extract$VAGUE = i_nov_7_10[lign, ]$VAGUE
dataset_inf_proj_7_10 = bind_rows(dataset_inf_proj_7_10, data_extract)
gc()
}
View(dataset_i_nov_7_10)
View(dataset_inf_proj_7_10)
View(dataset_final)
View(dataset_i_nov_1_6_final)
# Modification de la ligne 14
dataset_inf_proj_7_10[214, ]$Réalisation = "2023 - 2025"
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
# Conversion en numérique des montants
dataset_inf_proj_7_10 %>%
mutate(
REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = as.numeric(str_remove_all(`Montant du projet`, "(\\s|\\€)")),
AIDE = as.numeric(str_remove_all(`Aide accordée`, "(\\s|\\€)")),
DEPT = Localisation
) %>%
select(-c(Réalisation, `Montant du projet`, `Aide accordée`, Localisation)) -> data_inf_proj_7_10
View(data_inf_proj_7_10)
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
# Conversion en numérique des montants
dataset_inf_proj_7_10 %>%
mutate(
REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = as.numeric(str_remove_all(`Montant du projet`, "(\\s|\\€)")),
AIDE = as.numeric(str_remove_all(`Aide accordée`, "(\\s|\\€)")),
DEPT = str_remove_all(Localisation, "(et|\\-|\\&)")
) %>%
select(-c(Réalisation, `Montant du projet`, `Aide accordée`, Localisation)) -> data_inf_proj_7_10
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
# Conversion en numérique des montants
dataset_inf_proj_7_10 %>%
mutate(
REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = as.numeric(str_remove_all(`Montant du projet`, "(\\s|\\€)")),
AIDE = as.numeric(str_remove_all(`Aide accordée`, "(\\s|\\€)")),
DEPT = str_remove_all(Localisation, "(et|\\-|\\&)"),
DEPT = str_remove(DEPT, "\\s")
) %>%
select(-c(Réalisation, `Montant du projet`, `Aide accordée`, Localisation)) -> data_inf_proj_7_10
# Fusion entre i_nov_7_10 et data_inf_proj_7_10 (VAGUE, PAGE)
dataset_i_nov_7_10_final = inner_join(i_nov_7_10, data_inf_proj_7_10, by=c("VAGUE", "PAGE"))
View(dataset_i_nov_7_10_final)
View(i_nov_7_10)
View(i_nov_7_10)
# !!! Attention, erreur dans le sommaire pour la ligne 14 (Page est égale à 35 non à 32) !!!
i_nov_7_10[14, ]$PAGE
# !!! Attention, erreur dans le sommaire pour la ligne 14 (Page est égale à 35 non à 32) !!!
i_nov_7_10[14, ]$PAGE = 35
# Application de l'extraction sur les quatre derniers fichiers PDF
dataset_inf_proj_7_10 = data.frame()
gc()
localisation_actuelle = list(c())
localisation_actuelle = localisation_info_box_prem
for(lign in 1:nrow(i_nov_7_10)){
if(i_nov_7_10[lign, ]$PROJETS == "VIZZIA"){
i_nov_7_10[lign, ]$PAGE = 55
}
## Récupérons les informations de ce projet
extraction_7_10 = extract_tables(i_nov_7_10[lign, ]$URL_FICH_ORIGINE,
pages = i_nov_7_10[lign, ]$PAGE,
area = localisation_actuelle,
guess = FALSE,
col_names = FALSE)
print(extraction_7_10)
print(i_nov_7_10[lign, ])
print(i_nov_7_10[lign, ]$URL_FICH_ORIGINE)
print(i_nov_7_10[lign, ]$PAGE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
# Ajout des colonnes Page et Vague
data_extract$PAGE = i_nov_7_10[lign, ]$PAGE
data_extract$VAGUE = i_nov_7_10[lign, ]$VAGUE
dataset_inf_proj_7_10 = bind_rows(dataset_inf_proj_7_10, data_extract)
gc()
}
# Modification de la ligne 14
dataset_inf_proj_7_10[214, ]$Réalisation = "2023 - 2025"
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
# Conversion en numérique des montants (MONTANT et AIDE)
# Gestion des départements (DEPT)
dataset_inf_proj_7_10 %>%
mutate(
REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = as.numeric(str_remove_all(`Montant du projet`, "(\\s|\\€)")),
AIDE = as.numeric(str_remove_all(`Aide accordée`, "(\\s|\\€)")),
DEPT = str_remove_all(Localisation, "(et|\\-|\\&)"),
DEPT = str_remove(DEPT, "\\s")
) %>%
select(-c(Réalisation, `Montant du projet`, `Aide accordée`, Localisation)) -> data_inf_proj_7_10
# Fusion entre i_nov_7_10 et data_inf_proj_7_10 (VAGUE, PAGE)
dataset_i_nov_7_10_final = inner_join(i_nov_7_10, data_inf_proj_7_10, by=c("VAGUE", "PAGE"))
# Détection éventuelle de doublons au niveau des pages et vagues
i_nov_7_10 %>%  select(PAGE, VAGUE)
# Détection éventuelle de doublons au niveau des pages et vagues
i_nov_7_10 %>%  select(PAGE, VAGUE) %>% duplicated(.)
# Détection éventuelle de doublons au niveau des pages et vagues
i_nov_7_10 %>% select(PAGE, VAGUE) %>% filter(duplicated(.))
# Regardons les lignes concernées
i_nov_7_10 %>%
filter((VAGUE == 7 & PAGE == 84))
# Regardons les lignes concernées
i_nov_7_10 %>%
filter((VAGUE == 7 & PAGE == 84) | (VAGUE == 10 & PAGE %in% c(55, 47)))
# Regardons les lignes concernées
ligns_doublons = i_nov_7_10 %>%
filter((VAGUE == 7 & PAGE == 84) | (VAGUE == 10 & PAGE %in% c(55, 47)))
View(ligns_doublons)
i_nov_7_10[53, ]$PAGE = 83
# Regardons les lignes concernées
ligns_doublons = i_nov_7_10 %>%
filter((VAGUE == 7 & PAGE == 84) | (VAGUE == 10 & PAGE %in% c(55, 47)))
# Regardons les lignes concernées
ligns_doublons = i_nov_7_10 %>%
filter((VAGUE == 7 & PAGE == 84) | (VAGUE == 10 & PAGE %in% c(55, 47)))
View(i_nov_7_10)
i_nov_7_10[208, ]$PAGE = 54
# Regardons les lignes concernées
ligns_doublons = i_nov_7_10 %>%
filter((VAGUE == 7 & PAGE == 84) | (VAGUE == 10 & PAGE %in% c(55, 47)))
i_nov_7_10[202, ]$PAGE = 49
# Regardons les lignes concernées
ligns_doublons = i_nov_7_10 %>%
filter((VAGUE == 7 & PAGE == 84) | (VAGUE == 10 & PAGE %in% c(55, 47)))
# Application de l'extraction sur les quatre derniers fichiers PDF
dataset_inf_proj_7_10 = data.frame()
gc()
localisation_actuelle = list(c())
localisation_actuelle = localisation_info_box_prem
for(lign in 1:nrow(i_nov_7_10)){
if(i_nov_7_10[lign, ]$PROJETS == "VIZZIA"){
i_nov_7_10[lign, ]$PAGE = 55
}
## Récupérons les informations de ce projet
extraction_7_10 = extract_tables(i_nov_7_10[lign, ]$URL_FICH_ORIGINE,
pages = i_nov_7_10[lign, ]$PAGE,
area = localisation_actuelle,
guess = FALSE,
col_names = FALSE)
print(extraction_7_10)
print(i_nov_7_10[lign, ])
print(i_nov_7_10[lign, ]$URL_FICH_ORIGINE)
print(i_nov_7_10[lign, ]$PAGE)
# Transposition des données
data_extract = transpose(extraction_7_10[[1]])
# Renommer les colonnes
colnames(data_extract) = data_extract[1, ]
data_extract = data_extract[-1, ]
# Ajout des colonnes Page et Vague
data_extract$PAGE = i_nov_7_10[lign, ]$PAGE
data_extract$VAGUE = i_nov_7_10[lign, ]$VAGUE
dataset_inf_proj_7_10 = bind_rows(dataset_inf_proj_7_10, data_extract)
gc()
}
# Vérification de doublons
dataset_inf_proj_7_10 %>% select(PAGE, VAGUE) %>% filter(duplicated(.))
# Modification de la ligne 14
dataset_inf_proj_7_10[214, ]$Réalisation = "2023 - 2025"
# Séparation entre les années de réalisation (REALISATION_DEBUT et REALISATION_FIN)
# Conversion en numérique des montants (MONTANT et AIDE)
# Gestion des départements (DEPT)
dataset_inf_proj_7_10 %>%
mutate(
REALISATION_DEBUT = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[1]),
REALISATION_FIN = sapply(str_extract_all(Réalisation, "\\d{4}"), function(x) x[2]),
REALISATION_FIN = ifelse(is.na(REALISATION_FIN), REALISATION_DEBUT, REALISATION_FIN),
MONTANT = as.numeric(str_remove_all(`Montant du projet`, "(\\s|\\€)")),
AIDE = as.numeric(str_remove_all(`Aide accordée`, "(\\s|\\€)")),
DEPT = str_remove_all(Localisation, "(et|\\-|\\&)"),
DEPT = str_remove(DEPT, "\\s")
) %>%
select(-c(Réalisation, `Montant du projet`, `Aide accordée`, Localisation)) -> data_inf_proj_7_10
# Fusion entre i_nov_7_10 et data_inf_proj_7_10 (VAGUE, PAGE)
dataset_i_nov_7_10_final = inner_join(i_nov_7_10, data_inf_proj_7_10, by=c("VAGUE", "PAGE"))
View(dataset_i_nov_7_10_final)
# Vérification du succès de l'opération
head(dataset_i_nov_7_10_final)
tail(dataset_i_nov_7_10_final)
str(dataset_i_nov_7_10_final)
# Fusion et exportation de nos données préparées pour de futures analyses  ####
rbind(dataset_i_nov_1_6_final, dataset_i_nov_7_10_final)
# Fusion et exportation de nos données préparées pour de futures analyses  ####
dataset_final_somm_inf = rbind(dataset_i_nov_1_6_final, dataset_i_nov_7_10_final)
# Vérification du succès de l'opération
head(dataset_final_somm_inf)
tail(dataset_final_somm_inf)
str(dataset_final_somm_inf)
View(dataset_final_somm_inf)
# Exportation des données dans un fichier CSV
write.csv2(dataset_final_somm_inf, file = "../Data/i_nov_vag_1_10_somm_inf.csv",
row.names = FALSE, fileEncoding = "utf-8")
